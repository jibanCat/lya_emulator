'''
A collections of functions to help to convert single fidelity data structure
to multi-fidelity data structure.
'''
from typing import Tuple, List

import os
import numpy as np
import h5py
from .matter_emulator import MatterEmulator

# fidelity generation function
def gen_n_fidelities(
        fname_list: List[str] = [
            "data/lowRes/processed/test_dmonly.hdf5",
            "data/highRes/processed/test_dmonly.hdf5"] ,
        ) -> List[MatterEmulator]:
    '''
    Generate the MatterEmulator for n fidelities. Primarily for holding the
    data, so we can latter on organise the inputs for the multi-fidelities.

    :param fname_list: a list of filenames of the HDF5 files generated by
        SimulationRunner.multi_sims.MultiPowerSpec;
        from low fidelity to high fidelity
        
    :return emu_n_fidelities: n MatterEmualtors with low->high fidelities
    '''
    assert type(fname_list[0]) is str

    n_fidelities = len(fname_list)

    print("[Info] Loading {} fidelity data ...".format(n_fidelities))

    # setting emulators for different fidelities
    emu_n_fidelities = []
    for fname in fname_list:
        emu_n_fidelities.append(MatterEmulator(h5py.File(fname,  'r')))

    assert len(emu_n_fidelities) == n_fidelities
    print("Done.")

    return emu_n_fidelities


class HDF5Holder(h5py.File):
    '''
    Hold the h5 file generated by SimulationRunner.multi_sims.MultiPowerSpes,
    and add some class manipulation methods for it.
    '''
    def __init__(self, name: str, mode: str = 'r', saved_filename: str = 'test.h5'):
        super().__init__(name, mode=mode)

        # a temp file saved in the root
        self.saved_filename = saved_filename
        self._mode = mode

    def __add__(self, other):
        '''
        combine two HDF5 files for multi power spectra
        '''
        if os.path.exists(self.saved_filename):
            os.remove(self.saved_filename)

        # make sure the final size
        parameter_names = self['parameter_names'][()]
        assert np.all(parameter_names == other['parameter_names'][()])
        self_size  = self[parameter_names[0]].shape[0]
        other_size = other[parameter_names[0]].shape[0]
        assert other_size == other[parameter_names[-1]].shape[0]

        # it is safer to create another file than modifying the original file
        with h5py.File(self.saved_filename, 'w') as new:
            new.create_dataset('parameter_names', data=parameter_names)
            assert np.all( self['bounds'][()] == other['bounds'][()] )
            new.create_dataset('bounds', data=self['bounds'][()])

            # append Latin Hypercube parameters; not Latin hypercube anymore
            for param in parameter_names:
                val = np.append( self[param][()], other[param][()] )
                assert len(self[param][()].shape) == 1
                assert val.shape[0] == (self_size + other_size)
                new.create_dataset(param, data=val)
            
            # append simultions subgroups
            for i in range(self_size):
                sim = new.create_group('simulation_{}'.format(i) )

                for key in self['simulation_{}'.format(i)].keys():
                    sim.create_dataset(key, data=self['simulation_{}'.format(i)][key][()])
                
                # append attributes of the subgroup
                for key in self['simulation_{}'.format(i)].attrs.keys():
                    sim.attrs[key] = self['simulation_{}'.format(i)].attrs[key]
            
            for i in range(other_size):
                sim = new.create_group('simulation_{}'.format( i + self_size ))

                for key in other['simulation_{}'.format(i)].keys():
                    sim.create_dataset(key, data=other['simulation_{}'.format(i)][key][()])

                # append attributes of the subgroup
                for key in other['simulation_{}'.format(i)].attrs.keys():
                    sim.attrs[key] = other['simulation_{}'.format(i)].attrs[key]

            assert 'simulation_{}'.format( self_size + other_size - 1 ) in new.keys()

        return HDF5Holder(self.saved_filename, mode=self._mode)
